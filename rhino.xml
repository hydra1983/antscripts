<project name="rhino">
	<import>
		<url url="${SCRIPTS_BASE}/core.xml" />
		<url url="${SCRIPTS_BASE}/ant-contrib.xml" />
		<url url="${SCRIPTS_BASE}/uuid.xml" />
	</import>
	
	<get src="${SCRIPTS_LIB_BASE}/bsf-${bsf.version}.jar"
	     dest="${SCRIPTS_TMP_DIR}/bsf-${bsf.version}.jar"
	     usetimestamp="true" />
		 
	<get src="${SCRIPTS_LIB_BASE}/commons-logging-${commons-logging.version}.jar"
	     dest="${SCRIPTS_TMP_DIR}/commons-logging-${commons-logging.version}.jar"
	     usetimestamp="true" />
		 
	<get src="${SCRIPTS_LIB_BASE}/rhino-${rhino.version}.jar"
	     dest="${SCRIPTS_TMP_DIR}/rhino-${rhino.version}.jar"
	     usetimestamp="true" />

	<macrodef name="rhino">
		<attribute name="debug" default="false"/>
		<attribute name="script" default=""/>
		<attribute name="scriptFile" default=""/>
		<attribute name="dir" default="${basedir}"/>
		<text name="scriptText" optional="true"/>
		<sequential>
			<var name="vScript" value=""/>
			
			<if>
				<not><equals arg1="@{script}" arg2=""/></not>
				<then>
					<var name="vScript" value="@{script}"/>
				</then>
			</if>
			
			<if>
				<equals arg1="${vScript}" arg2=""/>
				<then>
					<if>
						<not><equals arg1="@{scriptFile}" arg2=""/></not>
						<then>
							<local name="scriptFileContent"/>
							<loadfile property="scriptFileContent" 
								encoding="UTF-8" srcfile="@{scriptFile}"/>
							<if>
								<and_>
									<isset_ property="scriptFileContent"/>
									<not><equals arg1="${scriptFileContent}" arg2=""/></not>
								</and_>
								<then>
									<var name="vScript" value="${scriptFileContent}"/>
								</then>
							</if>
						</then>
					</if>
				</then>
			</if>
			
			<if>
				<equals arg1="${vScript}" arg2=""/>
				<then>
					<if>
						<not><equals arg1="@{scriptText}" arg2=""/></not>
						<then>
							<var name="vScript" value="@{scriptText}"/>
						</then>
					</if>
				</then>
			</if>
			
			<if>
				<equals arg1="${vScript}" arg2=""/>
				<then>
					<fail message="Require ''script'',''scriptFile'' or''scriptText''"/>
				</then>
			</if>
			
			<if>
				<istrue value="@{debug}"/>
				<then>
					<echo>
########################################
# Execute script:
########################################
	
${vScript}
	
########################################
					</echo>
				</then>
			</if>
			
			<local name="uuid"/>
			<uuid property="uuid"/>
			
			<local name="dirUnix"/>
			<pathconvert property="dirUnix" targetos="unix">
				<path location="@{dir}"/>
			</pathconvert>
			
			<local name="scriptsBase"/>
			<propertyregex property="scriptsBase"
				  input="${SCRIPTS_BASE}"
				  regexp="file\:\/\/\/(.*)"
				  select="\1"
				  casesensitive="false" />
			
			<local name="scriptsBaseUnix"/>
			<if>
				<isset_ property="scriptsBase"/>
				<then>
					<pathconvert property="scriptsBaseUnix" targetos="unix">
						<path location="${scriptsBase}"/>
					</pathconvert>
				</then>
				<else>
					<property name="scriptsBaseUnix" value="${SCRIPTS_BASE}"/>
				</else>
			</if>
			
			<echo file="${env.TMP}/${uuid}.js">
				<![CDATA[
importPackage(java.lang, java.util, java.io);
var shell = org.mozilla.javascript.tools.shell.Main;
var args = ["-e",";"];
shell.exec(args);
var shellGlobal=shell.global;
var load=shellGlobal.load;
var print=shellGlobal.print;
var defineClass=shellGlobal.defineClass;
var deserialize=shellGlobal.deserialize;
var doctest=shellGlobal.doctest;
var gc=shellGlobal.gc;
var loadClass=shellGlobal.loadClass;
var readFile=shellGlobal.readFile;
var readUrl=shellGlobal.readUrl;
var runCommand=shellGlobal.runCommand;
var seal=shellGlobal.seal;
var serialize=shellGlobal.serialize;
var spawn=shellGlobal.spawn;
var sync=shellGlobal.sync;
var toint32=shellGlobal.toint32;
var version=shellGlobal.version;
var environment=shellGlobal.environment;

var __basedir__ ="${dirUnix}";
var __SCRIPTS_BASE__ = "${scriptsBaseUnix}";

//MD5
load(__SCRIPTS_BASE__ + "/rhino/md5.js");
var MD5 = CryptoJS.MD5;

//io
load(__SCRIPTS_BASE__ + "/rhino/io.js");

//file utils
load(__SCRIPTS_BASE__ + "/rhino/file_utils.js");

var help=function(){
	print('Functions              Description');
    print('=========              ===========');
    print('help()                 Display usage and help messages.');
    print('defineClass(className) Define an extension using the Java class');
    print('                       named with the string argument.');
    print('                       Uses ScriptableObject.defineClass().');
    print('load(["foo.js", ...])  Load JavaScript source files named by');
    print('                       string arguments.');
    print('loadClass(className)   Load a class named by a string argument.');
    print('                       The class must be a script compiled to a');
    print('                       class file.');
    print('print([expr ...])      Evaluate and print expressions.');
    print('version([number])      Get or set the JavaScript version number.');
    print('gc()                   Runs the garbage collector.');
    print('spawn(arg)             Evaluate function or script name on a new thread');
    print('sync(function [, obj]) Creates a synchronized version of the function,');
    print('                       where the synchronization object is the obj');
    print('                       argument or "this" if obj is undefined');
    print('readFile(fileName [, encoding])');
    print('                       Returns the content of the file as a string.');
    print('                       Encoding of the string can be optionally specified.');
    print('readUrl(url [, encoding])'); 
    print('                       Similar to readFile, reads the contents of the url.');
    print('runCommand(name ...)   Runs a specified shell command. Additional arguments are');
    print('                       passed to the command'); 
    print('seal(args ...)         Seals the supplied objects'); 
    print('toint32(arg)           Converts the argument into a 32-bit integer');
    print('serialize(obj, fileName)'); 
    print('                       Serializes an object and saves it to a file');
    print('deserialize(fileName)  Reconstructs a serialized object');
    print('environment            Returns the current environment object');
	print('MD5(string)            Returns the MD5 value of the given string.');
	print('writeFile(string, file, [, encoding]).');
	print('                       Write string to file with given encoding.');
};

				]]>	
			</echo>
			
			<echo message="${vScript}" file="${env.TMP}/${uuid}.js" append="true"/>
			
			<script language="javascript" src="${env.TMP}/${uuid}.js">
				<classpath>
					<fileset dir="${SCRIPTS_TMP_DIR}">
						<include name="bsf*.jar"/>
						<include name="commons-logging*.jar"/>
						<include name="rhino*.jar"/>
					</fileset>
				</classpath>
			</script>  
			
			<delete file="${env.TMP}/${uuid}.js"/>
			<var name="vScript" unset="true"/>
		</sequential>
	</macrodef>
</project>