<project name="mvn">
	<import>
		<url url="${SCRIPTS_BASE}/ant-contrib.xml" />
		<url url="${SCRIPTS_BASE}/string.xml" />
		<url url="${SCRIPTS_BASE}/uuid.xml" />
		<url url="${SCRIPTS_BASE}/file.xml" />
	</import>

	<property name="M2_HOME" value="${env.M2_HOME}" />

	<macrodef name="mvn">
		<element name="args" implicit="true" />
		<attribute name="dir" default="${basedir}" />
		<attribute name="failonerror" default="true" />
		<sequential>
			<var name="exec" value="mvn" />
			<if>
				<equals arg1="${osfamily}" arg2="windows" />
				<then>
					<var name="exec" value="mvn.bat" />
				</then>
			</if>
			<exec executable="${M2_HOME}/bin/${exec}"
			      dir="@{dir}"
			      failonerror="@{failonerror}">
				<args />
			</exec>
		</sequential>
	</macrodef>

	<!-- 
	The artifact definition should be :
		{groupId}:{artifactId}:{version}:{type}:{classifier};{outputDir};{fileName}
	"classifier", "outputDir" and "fileName" are optional. 
	if you want to set "fileName", you must set "outputDir" as well.
	You must set one of "artifact","artifacts","artifactFile","artifactText","artifactFiles"
	-->
	<macrodef name="download-artifacts">
		<!--
		outputdir:
			The default directory to copy artifact files to.
		-->
		<attribute name="outputdir" default="${basedir}" />
		
		<!--
		dryrun:
			If true, no artifacts will be downloaded.
		-->
		<attribute name="dryrun" default="false" />
		
		<!--
		overwrite:
			Will copy artifacts even if it's already exists.
		-->
		<attribute name="overwrite" default="false" />
		
		<!--
		tmpdir:
			The directory to put generated pom file into.
		-->
		<attribute name="tmpdir" default="${env.TMP}" />
		
		<!--
		dir:
			The working directory.
		-->
		<attribute name="dir" default="${basedir}/target" />
		
		<!--
		quiet:
			If true, no output of maven build process.
		-->
		<attribute name="quiet" default="true" />
		
		<!--
		failonerror:
			If true, fail the task when error occurred.
		-->
		<attribute name="failonerror" default="true" />
		
		<!--
		debug:
			If true, generate debug info and the generated
			pom file in "tmpdir" won't be deleted.
		-->
		<attribute name="debug" default="false" />
		<!--
		nounpack:
			If true, will copy zip and war artifact
			files without unpacking them.
		-->
		<attribute name="nounpack" default="false" />
		
		<!--
		artifacts:
			Definition of artifact.
		-->
		<attribute name="artifact" default="" />
		
		<!--
		artifacts:
			Definitions of artifact conjunct with comma.
		-->
		<attribute name="artifacts" default="" />
		
		<!--
		artifactFile:
			The file contains artifacts definition.
		"#" is used to comment a line.
		-->
		<attribute name="artifactFile" default="" />
		
		<!--
		artifactsText:
			Inline artifact definitions.
		"#" is used to comment a line.
		-->
		<text name="artifactsText" trim="true" optional="true" />
		
		<!--
		artifactFiles:
			The files contains artifacts definition.
		"#" is used to comment a line.
		-->
		<element name="artifactFiles" implicit="true" optional="true" />
		<sequential>
			<var name="vArtifacts" value="" />

			<if>
				<equals arg1="${vArtifacts}" arg2="" trim="true" />
				<then>
					<local name="artifactFilesContent" />
					<trycatch>
						<try>
							<loadfiles property="artifactFilesContent"
					           tmpdir="@{tmpdir}"
					           failonerror="false">
								<artifactFiles />
							</loadfiles>

							<var name="vArtifacts" value="${artifactFilesContent}" />
						</try>
						<catch/>
					</trycatch>
				</then>
			</if>

			<if>
				<and>
					<equals arg1="${vArtifacts}" arg2="" trim="true" />
					<not>
						<equals arg1="@{artifactFile}" arg2="" />
					</not>
					<resourceexists>
						<file file="@{artifactFile}" />
					</resourceexists>
				</and>
				<then>
					<local name="artifactFileContent" />
					<loadfile srcfile="@{artifactFile}"
					          property="artifactFileContent"
					          failonerror="@{failonerror}" />
					<var name="vArtifacts" value="${artifactFileContent}" />
				</then>
			</if>

			<if>
				<equals arg1="${vArtifacts}" arg2="" trim="true" />
				<then>
					<var name="vArtifacts" value="@{artifactsText}" />
				</then>
			</if>
			
			<if>
				<equals arg1="${vArtifacts}" arg2="" trim="true" />
				<then>
					<var name="vArtifacts" value="@{artifacts}" />
				</then>
			</if>

			<if>
				<equals arg1="${vArtifacts}" arg2="" trim="true" />
				<then>
					<var name="vArtifacts" value="@{artifact}" />
				</then>
			</if>

			<if>
				<equals arg1="${vArtifacts}" arg2="" trim="true" />
				<then>
					<fail message="Cannot find artifacts to download" />
				</then>
			</if>

			<var name="vCopyDependencies" value="" />
			<var name="vUnpackDependencies" value="" />

			<for list="${vArtifacts}"
			     delimiter="${line.separator}"
			     param="pArtifact">
				<sequential>
					<local name="trimedArtifact" />
					<trim input="@{pArtifact}" property="trimedArtifact" />
					<if>
						<and_>
							<not_>
								<equals arg1="${trimedArtifact}" arg2="" />
							</not_>
							<not_>
								<startswith string="${trimedArtifact}"
								            with="#" />
							</not_>
						</and_>
						<then>
							<var name="vOriginDef" value="${trimedArtifact}" />
							<var name="vGroupId" value="" />
							<var name="vArtifactId" value="" />
							<var name="vVersion" value="" />
							<var name="vType" value="" />
							<var name="vClassifier" value="" />
							<var name="vOverwrite" value="@{overwrite}" />
							<var name="vOutputdir" value="" />
							<var name="vDestFile" value="" />
							<var name="vFinalName" value="" />

							<var name="vI" value="0" />
							<for list="${vOriginDef}"
							     delimiter=";"
							     param="pValue"
							     trim="true">
								<sequential>
									<switch value="${vI}">
										<case value="0">
											<var name="vArtifactDef"
											     value="@{pValue}" />
											<var name="vJ" value="0" />
											<for list="${vArtifactDef}"
											     delimiter=":"
											     param="pDefValue"
											     trim="true">
												<sequential>
													<switch value="${vJ}">
														<case value="0">
															<var name="vGroupId"
															     value="@{pDefValue}" />
														</case>
														<case value="1">
															<var name="vArtifactId"
															     value="@{pDefValue}" />
														</case>
														<case value="2">
															<var name="vVersion"
															     value="@{pDefValue}" />
														</case>
														<case value="3">
															<var name="vType"
															     value="@{pDefValue}" />
														</case>
														<case value="4">
															<var name="vClassifier"
															     value="@{pDefValue}" />
														</case>
													</switch>

													<var name="vFinalName"
													     value="${vArtifactId}-${vVersion}.${vType}" />
													<if>
														<not>
															<equals arg1="${vClassifier}"
															        arg2="" />
														</not>
														<then>
															<var name="vFinalName"
															     value="${vArtifactId}-${vVersion}-${vClassifier}.${vType}" />
														</then>
													</if>
													<math operation="+"
													      operand1="${vJ}"
													      operand2="1"
													      result="vJ"
													      datatype="int" />
												</sequential>
											</for>
											<var name="vArtifactDef"
											     unset="true" />
											<var name="vJ" unset="true" />
										</case>
										<case value="1">
											<var name="vOutputdir"
											     value="@{pValue}" />
										</case>
										<case value="2">
											<var name="vDestFile"
											     value="@{pValue}" />
										</case>
									</switch>

									<math operation="+"
									      operand1="${vI}"
									      operand2="1"
									      result="vI"
									      datatype="int" />
								</sequential>
							</for>

							<if>
								<equals arg1="${vOutputdir}" arg2="" />
								<then>
									<var name="vOutputdir" value="@{outputdir}" />
								</then>
							</if>

							<local name="typeLowerCase" />
							<toLowerCase input="${vType}" property="typeLowerCase" />

							<if>
								<and>
									<not><istrue value="@{nounpack}"/></not>
									<or>
										<equals arg1="${typeLowerCase}"
												arg2="zip" />
										<equals arg1="${typeLowerCase}"
												arg2="war" />
									</or>
								</and>
								<then>
									<var name="vDestFile" value="" />
								</then>
								<else>
									<if>
										<equals arg1="${vDestFile}" arg2="" />
										<then>
											<var name="vDestFile" value="${vFinalName}" />
										</then>
									</if>
								</else>
							</if>
							
							<if>
								<istrue value="@{debug}"/>
								<then>
									<echo>
----------------------------------------	
| ${vOriginDef}							
----------------------------------------
| groupId : ${vGroupId}	
| artifactId : ${vArtifactId}	
| version : ${vVersion}	
| type : ${vType}	
| classifier : ${vClassifier}	
| overwrite : ${vOverwrite}	
| outputdir : ${vOutputdir}	
| destfile : ${vDestFile}	
----------------------------------------
									</echo>
								</then>
							</if>

							<local name="artifactItem" />
							<loadresource property="artifactItem">
								<url url="${SCRIPTS_BASE}/mvn/dependencies.artifact.tpl" />
								<filterchain>
									<tokenfilter>
										<replacestring from="@%{groupId}"
										               to="${vGroupId}" />
										<replacestring from="@%{artifactId}"
										               to="${vArtifactId}" />
										<replacestring from="@%{version}"
										               to="${vVersion}" />
										<replacestring from="@%{type}"
										               to="${vType}" />
										<replacestring from="@%{classifier}"
										               to="${vClassifier}" />
										<replacestring from="@%{overwrite}"
										               to="${vOverwrite}" />
										<replacestring from="@%{outputdir}"
										               to="${vOutputdir}" />
										<replacestring from="@%{destfile}"
										               to="${vDestFile}" />
									</tokenfilter>
								</filterchain>
							</loadresource>

							<if>
								<and>
									<not><istrue value="@{nounpack}"/></not>
									<or>
										<equals arg1="${typeLowerCase}"
												arg2="zip" />
										<equals arg1="${typeLowerCase}"
												arg2="war" />
									</or>
								</and>
								<then>
									<var name="vUnpackDependencies"
									     value="${vUnpackDependencies}${line.separator}${artifactItem}" />
								</then>
								<else>
									<var name="vCopyDependencies"
									     value="${vCopyDependencies}${line.separator}${artifactItem}" />
								</else>
							</if>

							<var name="vOriginDef" unset="true" />
							<var name="VGroupId" unset="true" />
							<var name="vArtifactId" unset="true" />
							<var name="vVersion" unset="true" />
							<var name="vType" unset="true" />
							<var name="vClassifier" unset="true" />
							<var name="vOverwrite" unset="true" />
							<var name="vOutputdir" unset="true" />
							<var name="vDestfile" unset="true" />
							<var name="vFinalName" unset="true" />

							<var name="vI" unset="true" />
						</then>
					</if>
				</sequential>
			</for>

			<local name="copyExec" />
			<if>
				<not>
					<equals arg1="${vCopyDependencies}" arg2="" />
				</not>
				<then>
					<loadresource property="copyExec">
						<url url="${SCRIPTS_BASE}/mvn/dependencies.exec.tpl" />
						<filterchain>
							<tokenfilter>
								<replacestring from="@%{action}" to="copy" />
								<replacestring from="@%{dependencies}"
								               to="${vCopyDependencies}" />
							</tokenfilter>
						</filterchain>
					</loadresource>
				</then>
			</if>

			<local name="unpackExec" />
			<if>
				<not>
					<equals arg1="${vUnpackDependencies}" arg2="" />
				</not>
				<then>
					<loadresource property="unpackExec">
						<url url="${SCRIPTS_BASE}/mvn/dependencies.exec.tpl" />
						<filterchain>
							<tokenfilter>
								<replacestring from="@%{action}" to="unpack" />
								<replacestring from="@%{dependencies}"
								               to="${vUnpackDependencies}" />
							</tokenfilter>
						</filterchain>
					</loadresource>
				</then>
			</if>

			<var name="vExecs" value="" />

			<if>
				<isset property="unpackExec" />
				<then>
					<var name="vExecs"
					     value="${vExecs}${line.separator}${unpackExec}" />
				</then>
			</if>

			<if>
				<isset property="copyExec" />
				<then>
					<var name="vExecs"
					     value="${vExecs}${line.separator}${copyExec}" />
				</then>
			</if>

			<if>
				<not>
					<equals arg1="${vExecs}" arg2="" />
				</not>
				<then>
					<var name="vQuiet" value="" />
					<local name="quietLowerCase" />
					<toLowerCase input="@{quiet}" property="quietLowerCase" />

					<var name="vDryrun" value="" />
					<local name="dryrunLowerCase" />
					<toLowerCase input="@{dryrun}" property="dryrunLowerCase" />

					<mkdir dir="@{tmpdir}" />

					<local name="uuid" />
					<uuid property="uuid" />

					<local name="pomFile" />
					<property name="pomFile" value="@{tmpdir}/${uuid}" />

					<get src="${SCRIPTS_BASE}/mvn/dependencies.tpl"
					     dest="${pomFile}" />

					<replace file="${pomFile}">
						<replacefilter token="@%{executions}" value="${vExecs}" />
					</replace>

					<if>
						<equals arg1="${dryrunLowerCase}" arg2="false" />
						<then>
							<trycatch>
								<try>
									<if>
										<istrue value="${quietLowerCase}"/>
										<then>
											<mvn dir="@{dir}"
												 failonerror="@{failonerror}">
												<arg value="generate-resources" />
												<arg value="-q" />
												<arg value="-f" />
												<arg value="${pomFile}" />
											</mvn>
										</then>
										<else>
											<mvn dir="@{dir}"
												 failonerror="@{failonerror}">
												<arg value="generate-resources" />
												<arg value="-f" />
												<arg value="${pomFile}" />
											</mvn>
										</else>
									</if>									
								</try>
								<finally>
									<if>
										<isfalse value="@{debug}"/>
										<then>
											<delete file="${pomFile}" />
										</then>
									</if>
								</finally>
							</trycatch>
						</then>
					</if>

					<var name="vQuiet" unset="true" />
					<var name="vDryrun" unset="true" />
				</then>
			</if>

			<var name="vArtifacts" unset="true" />
			<var name="vCopyDependencies" unset="true" />
			<var name="vUnpackDependencies" unset="true" />
			<var name="vExecs" unset="true" />
		</sequential>
	</macrodef>
	
	<!-- 
	The artifact definition should be :
		{groupId}:{artifactId}:{version}:{type}:{classifier};{fileLocation}
	"classifier" is optional. 
	-->
	<macrodef name="deploy-artifacts">
		<!--
		dryrun:
			If true, no artifacts will be downloaded.
		-->
		<attribute name="dryrun" default="false" />
		
		<!--
		tmpdir:
			The directory to put generated pom file into.
		-->
		<attribute name="tmpdir" default="${env.TMP}" />
		
		<!--
		dir:
			The working directory.
		-->
		<attribute name="dir" default="${basedir}/target" />
		
		<!--
		quiet:
			If true, no output of maven build process.
		-->
		<attribute name="quiet" default="true" />
		
		<!--
		failonerror:
			If true, fail the task when error occurred.
		-->
		<attribute name="failonerror" default="true" />
		
		<!--
		debug:
			If true, generate debug info and the generated
			pom file in "tmpdir" won't be deleted.
		-->
		<attribute name="debug" default="false" />
		
		<!--
		repositoryId:
			The id of the repository to deploy artifacts to.
		-->
		<attribute name="repositoryId" />
		
		<!--
		repositoryUrl:
			The url of the repository to deploy artifacts to.
		-->
		<attribute name="repositoryUrl" />
		
		<!--
		artifacts:
			Definitions of artifacts conjunct with comma.
		-->
		<attribute name="artifacts"/>
		<sequential>
			<var name="vDuplicates" value=""/>
			<var name="vDeployExecs" value=""/>
			<for list="@{artifacts}" param="pArtifact" delimiter="${line.separator}">
				<sequential>
					<if>
						<and_>
							<not_><equals arg1="@{pArtifact}" arg2="" /></not_>
							<not_><startswith string="@{pArtifact}" with="#" /></not_>
						</and_>
						<then>
							<var name="vOriginDef" value="@{pArtifact}" />
							<var name="vGroupId" value="" />
							<var name="vArtifactId" value="" />
							<var name="vVersion" value="" />
							<var name="vType" value="" />
							<var name="vClassifier" value="" />
							<var name="vLocation" value=""/>
							
							<var name="vI" value="0" />										
							<for list="${vOriginDef}"  param="pValue" 
								delimiter=";" trim="true">
								<sequential>
									<switch value="${vI}">
										<case value="0">
											<var name="vArtifactDef" value="@{pValue}" />
											<var name="vJ" value="0" />
											<for list="${vArtifactDef}"
												 delimiter=":"
												 param="pDefValue"
												 trim="true">
												<sequential>
													<switch value="${vJ}">
														<case value="0">
															<var name="vGroupId" value="@{pDefValue}" />
														</case>
														<case value="1">
															<var name="vArtifactId" value="@{pDefValue}" />
														</case>
														<case value="2">
															<var name="vVersion" value="@{pDefValue}" />
														</case>
														<case value="3">
															<var name="vType" value="@{pDefValue}" />
														</case>
														<case value="4">
															<var name="vClassifier" value="@{pDefValue}" />
														</case>
														<default/>
													</switch>
													<math operation="+"
														  operand1="${vJ}"
														  operand2="1"
														  result="vJ"
														  datatype="int" />
												</sequential>
											</for>
											<var name="vArtifactDef" unset="true" />
											<var name="vJ" unset="true" />
										</case>
										<case value="1">
											<var name="vLocation" value="@{pValue}"/>
										</case>
										<default/>
									</switch>

									<math operation="+"
										  operand1="${vI}"
										  operand2="1"
										  result="vI"
										  datatype="int" />
								</sequential>
							</for>
							
							<if>
								<istrue value="@{debug}"/>
								<then>
									<echo>
----------------------------------------	
| ${vOriginDef}						
----------------------------------------
| groupId : ${vGroupId}	
| artifactId : ${vArtifactId}	
| version : ${vVersion}	
| type : ${vType}	
| classifier : ${vClassifier}	
| location : ${vLocation}	
----------------------------------------
									</echo>
								</then>
							</if>
							
							<local name="lUnderscoredGroupId"/>
							<propertyregex property="lUnderscoredGroupId"
								  global="true"
								  input="${vGroupId}"
								  regexp="\."
								  replace="_"/>
								  
							<local name="lOptClassifer"/>
							<if>
								<equals arg1="${vClassifier}" arg2=""/>
								<then>
									<property name="lOptClassifer" value=""/>
								</then>
								<else>
									<property name="lOptClassifer" value="-${vClassifier}"/>
								</else>
							</if>
							
							<local name="lUniqueName"/>
							<property name="lUniqueName" value="${lUnderscoredGroupId}-${vArtifactId}${lOptClassifer}.${vType}"/>
							
							<if>
								<contains string="${vDuplicates}" substring="${lUniqueName}"/>
								<then>
									<if>
										<istrue value="@{debug}"/>
										<then>
											<echo message="[DUPLICATE] : ${lUniqueName}"/>
										</then>
									</if>
								</then>
								<else>
									<local name="lDeployExec" />
									<loadresource property="lDeployExec">
										<url url="${SCRIPTS_BASE}/mvn/deploy.exec.tpl" />
										<filterchain>
											<tokenfilter>
												<replacestring from="@%{underscoredGroupId}" to="${lUnderscoredGroupId}" />									
												<replacestring from="@%{optClassifier}" to="${lOptClassifer}" />
												<replacestring from="@%{groupId}" to="${vGroupId}" />
												<replacestring from="@%{artifactId}" to="${vArtifactId}" />
												<replacestring from="@%{version}" to="${vVersion}" />
												<replacestring from="@%{type}" to="${vType}" />
												<replacestring from="@%{classifier}" to="${vClassifier}" />
												<replacestring from="@%{location}" to="${vLocation}" />
											</tokenfilter>
										</filterchain>
									</loadresource>
									<var name="vDuplicates" value="${vDuplicates}${lUniqueName},"/>
									<var name="vDeployExecs"
										value="${vDeployExecs}${line.separator}${lDeployExec}" />
								</else>
							</if>
							
							<var name="vOriginDef" unset="true" />
							<var name="vGroupId" unset="true" />
							<var name="vArtifactId" unset="true" />
							<var name="vVersion" unset="true" />
							<var name="vType" unset="true" />
							<var name="vClassifier" unset="true" />
							<var name="vLocation" unset="true"/>
							
							<var name="vI" unset="true" />
						</then>
					</if>
				</sequential>				
			</for>

			<if>
				<not>
					<equals arg1="${vDeployExecs}" arg2="" />
				</not>
				<then>
					<var name="vQuiet" value="" />
					<local name="quietLowerCase" />
					<toLowerCase input="@{quiet}" property="quietLowerCase" />

					<var name="vDryrun" value="" />
					<local name="dryrunLowerCase" />
					<toLowerCase input="@{dryrun}" property="dryrunLowerCase" />

					<mkdir dir="@{tmpdir}" />

					<local name="uuid" />
					<uuid property="uuid" />

					<local name="pomFile" />
					<property name="pomFile" value="@{tmpdir}/${uuid}" />

					<get src="${SCRIPTS_BASE}/mvn/deploy.tpl" dest="${pomFile}" />

					<replace file="${pomFile}">
						<replacefilter token="@%{executions}" value="${vDeployExecs}" />
						<replacefilter token="@%{repositoryId}" value="@{repositoryId}" />
						<replacefilter token="@%{repositoryUrl}" value="@{repositoryUrl}" />
					</replace>

					<if>
						<equals arg1="${dryrunLowerCase}" arg2="false" />
						<then>
							<trycatch>
								<try>
									<if>
										<istrue value="${quietLowerCase}"/>
										<then>
											<mvn dir="@{dir}"
												 failonerror="@{failonerror}">
												<arg value="deploy" />
												<arg value="-q" />
												<arg value="-f" />
												<arg value="${pomFile}" />
											</mvn>
										</then>
										<else>
											<mvn dir="@{dir}"
												 failonerror="@{failonerror}">
												<arg value="deploy" />
												<arg value="-f" />
												<arg value="${pomFile}" />
											</mvn>
										</else>
									</if>									
								</try>
								<finally>
									<if>
										<isfalse value="@{debug}"/>
										<then>
											<delete file="${pomFile}" />
										</then>
									</if>
								</finally>
							</trycatch>
						</then>
					</if>

					<var name="vQuiet" unset="true" />
					<var name="vDryrun" unset="true" />
				</then>
			</if>

			<var name="vDuplicates" unset="true"/>
			<var name="vDeployExecs" unset="true"/>
		</sequential>
	</macrodef>
</project>